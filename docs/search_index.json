[
["index.html", "Using R &amp; Neo4J Chapter 1 About 1.1 {neo4r}", " Using R &amp; Neo4J Colin Fay 2019-01-25 Chapter 1 About This book is a user companion for using Neo4J and R together with the {neo4r} package. 1.1 {neo4r} The goal of {neo4r} is to provide a modern and flexible Neo4J driver for R. It’s modern in the sense that the results are returned as tibbles whenever possible, it relies on modern tools, and it is designed to work with pipes. Our goal is to provide a driver that can be easily integrated in a data analysis workflow, especially by providing an API working smoothly with other data analysis ({dplyr} or {purrr}) and graph packages ({igraph}, {ggraph}, {visNetwork}…). It’s flexible in the sense that it is rather unopinionated regarding the way it returns the results, by trying to stay as close as possible to the way Neo4J returns data. That way, you have the control over the way you will compute the results. At the same time, the result is not too complex, so that the “heavy lifting” of data wrangling is not left to the user. The connexion object is also an easy to control R6 method, allowing you to update and query information from the API. Sending data for this book: library(neo4r) con &lt;- neo4j_api$new( url = &quot;http://localhost:7474&quot;, user = &quot;neo4j&quot;, password = &quot;neo4j&quot; ) call_neo4j(&quot;MATCH (n) DETACH DELETE n&quot;, con) ## No data returned. ## list() ## attr(,&quot;class&quot;) ## [1] &quot;neo&quot; &quot;neo&quot; &quot;list&quot; read_cypher(&quot;data-raw/create.cypher&quot;) ## # A tibble: 4 x 1 ## cypher ## &lt;chr&gt; ## 1 CREATE CONSTRAINT ON (b:Band) ASSERT b.name IS UNIQUE; ## 2 CREATE CONSTRAINT ON (c:City) ASSERT c.name IS UNIQUE; ## 3 CREATE CONSTRAINT ON (r:record) ASSERT r.name IS UNIQUE; ## 4 CREATE (ancient:Band {name: &#39;Ancient&#39;, formed: 1992}), (acturus:Band {na… send_cypher(&quot;data-raw/create.cypher&quot;, con) ## No data returned. ## No data returned. ## No data returned. ## No data returned. ## [[1]] ## # A tibble: 12 x 2 ## type value ## &lt;chr&gt; &lt;dbl&gt; ## 1 contains_updates 0 ## 2 nodes_created 0 ## 3 nodes_deleted 0 ## 4 properties_set 0 ## 5 relationships_created 0 ## 6 relationship_deleted 0 ## 7 labels_added 0 ## 8 labels_removed 0 ## 9 indexes_added 0 ## 10 indexes_removed 0 ## 11 constraints_added 0 ## 12 constraints_removed 0 ## ## [[2]] ## # A tibble: 12 x 2 ## type value ## &lt;chr&gt; &lt;dbl&gt; ## 1 contains_updates 0 ## 2 nodes_created 0 ## 3 nodes_deleted 0 ## 4 properties_set 0 ## 5 relationships_created 0 ## 6 relationship_deleted 0 ## 7 labels_added 0 ## 8 labels_removed 0 ## 9 indexes_added 0 ## 10 indexes_removed 0 ## 11 constraints_added 0 ## 12 constraints_removed 0 ## ## [[3]] ## # A tibble: 12 x 2 ## type value ## &lt;chr&gt; &lt;dbl&gt; ## 1 contains_updates 0 ## 2 nodes_created 0 ## 3 nodes_deleted 0 ## 4 properties_set 0 ## 5 relationships_created 0 ## 6 relationship_deleted 0 ## 7 labels_added 0 ## 8 labels_removed 0 ## 9 indexes_added 0 ## 10 indexes_removed 0 ## 11 constraints_added 0 ## 12 constraints_removed 0 ## ## [[4]] ## # A tibble: 12 x 2 ## type value ## &lt;chr&gt; &lt;dbl&gt; ## 1 contains_updates 1 ## 2 nodes_created 55 ## 3 nodes_deleted 0 ## 4 properties_set 104 ## 5 relationships_created 49 ## 6 relationship_deleted 0 ## 7 labels_added 54 ## 8 labels_removed 0 ## 9 indexes_added 0 ## 10 indexes_removed 0 ## 11 constraints_added 0 ## 12 constraints_removed 0 See the cypher query at https://github.com/neo4j-rstats/user-guide/blob/master/data-raw/create.cypher "],
["intro.html", "Chapter 2 Introduction 2.1 Installation", " Chapter 2 Introduction 2.1 Installation 2.1.1 Dev version from GitHub # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;neo4j-rstats/neo4r&quot;) "],
["connect.html", "Chapter 3 Connection 3.1 HTTP connection 3.2 Get informations about the connection :", " Chapter 3 Connection 3.1 HTTP connection You can start a new connection to your server with the neo4j_api object. You’ll need to call neo4j_api$new, with the url (with port specified if any), your user name, and your password. library(neo4r) con &lt;- neo4j_api$new( url = &quot;http://localhost:7474&quot;, user = &quot;neo4j&quot;, password = &quot;neo4j&quot; ) If you don’t want your password to be included in the script, you can use the rstudioapi::askForPassword() function, which will open a little widget asking to interactively enter your password. con &lt;- neo4j_api$new( url = &quot;http://localhost:7474&quot;, user = &quot;neo4j&quot;, password = rstudioapi::askForPassword() ) You can then check if you can access to the server by pinging it: con$ping() ## [1] 200 Which should return 200 if the connexion succeeded. 3.2 Get informations about the connection : You’ll then be able to get information about the server with: # Get Neo4J Version con$get_version() ## [1] &quot;3.4.5&quot; # List constaints (if any) con$get_constraints() ## label type property_keys ## 1: artist UNIQUENESS name ## 2: Maintainer UNIQUENESS name ## 3: Band UNIQUENESS name ## 4: City UNIQUENESS name ## 5: record UNIQUENESS name ## 6: Package UNIQUENESS name ## 7: Author UNIQUENESS name # Get a vector of labels (if any) con$get_labels() ## # A tibble: 7 x 1 ## labels ## &lt;chr&gt; ## 1 Package ## 2 Band ## 3 Maintainer ## 4 record ## 5 artist ## 6 Author ## 7 City # Get a vector of relationships (if any) con$get_relationships() ## # A tibble: 3 x 1 ## labels ## &lt;chr&gt; ## 1 PLAYED_IN ## 2 IS_FROM ## 3 WAS_RECORDED # Get schema con$get_schema() ## label property_keys ## 1: City name ## 2: Band name ## 3: Maintainer name ## 4: Author name ## 5: Package name ## 6: artist name ## 7: record name "],
["retrieve.html", "Chapter 4 Retrieve data from the API 4.1 “rows” format 4.2 Parsing results", " Chapter 4 Retrieve data from the API The API can be called either from the connection objet, or with the call_neo4j() function. The call_neo4j() function takes several arguments : query : the cypher query con : the connexion object type : “rows” or “graph”: wether to return the results as a list of results in tibble, or as a graph object (with $nodes and $relationships) output : the output format (R or json) include_stats : whether or not to include the stats about the call meta : wether or not to include the meta arguments of the nodes when calling with “rows” 4.1 “rows” format The user chooses wether or not to return a list of tibbles when calling the API. You get as many objects as specified in the RETURN cypher statement. library(magrittr) &#39;MATCH (r:record) -[:WAS_RECORDED] -&gt; (b:Band) where b.formed = 1991 RETURN *;&#39; %&gt;% call_neo4j(con) ## $b ## # A tibble: 1 x 2 ## name formed ## &lt;chr&gt; &lt;int&gt; ## 1 Immortal 1991 ## ## $r ## # A tibble: 1 x 2 ## release name ## &lt;int&gt; &lt;chr&gt; ## 1 1993 Pure Holocaust ## ## attr(,&quot;class&quot;) ## [1] &quot;neo&quot; &quot;neo&quot; &quot;list&quot; By default, results are returned as an R list of tibbles. We think this is the more “truthful” way to implement the outputs regarding Neo4J calls. For example, when you want to return two nodes types, you’ll get two results, in the form of two tibbles (what we’ve seen just before) - the result is a two elements list with each element being labelled the way it has been specified in the Cypher query. Results can also be returned in JSON: &#39;MATCH (r:record) -[:WAS_RECORDED] -&gt; (b:Band) where b.formed = 1991 RETURN *;&#39; %&gt;% call_neo4j(con, output = &quot;json&quot;) ## [ ## [ ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Burzum&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1992], ## &quot;name&quot;: [&quot;Hvis lyset tar oss&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12591], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13608], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Burzum&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1993], ## &quot;name&quot;: [&quot;Filosofem&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12591], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13613], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Burzum&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1991], ## &quot;name&quot;: [&quot;Demo I&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12591], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13594], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Burzum&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1992], ## &quot;name&quot;: [&quot;Aske&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12591], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13606], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Burzum&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1992], ## &quot;name&quot;: [&quot;Det som engang var&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12591], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13600], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Burzum&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1992], ## &quot;name&quot;: [&quot;Burzum&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12591], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13599], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Burzum&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1991], ## &quot;name&quot;: [&quot;Demo II&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12591], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13597], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Enslaved&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1991], ## &quot;name&quot;: [&quot;Nema&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12595], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13598], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Enslaved&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1992], ## &quot;name&quot;: [&quot;Yggdrasill&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12595], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13604], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Enslaved&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1992], ## &quot;name&quot;: [&quot;Hordanes Land&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12595], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13610], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Enslaved&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1993], ## &quot;name&quot;: [&quot;Vikingligr Veldi&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12595], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13615], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Immortal&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1991], ## &quot;name&quot;: [&quot;Immortal&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12598], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13596], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Immortal&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1992], ## &quot;name&quot;: [&quot;Diabolical Fullmoon Mysticism&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12598], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13601], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## }, ## { ## &quot;row&quot;: [ ## { ## &quot;name&quot;: [&quot;Immortal&quot;], ## &quot;formed&quot;: [1991] ## }, ## { ## &quot;release&quot;: [1993], ## &quot;name&quot;: [&quot;Pure Holocaust&quot;] ## } ## ], ## &quot;meta&quot;: [ ## { ## &quot;id&quot;: [12598], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## }, ## { ## &quot;id&quot;: [13621], ## &quot;type&quot;: [&quot;node&quot;], ## &quot;deleted&quot;: [false] ## } ## ] ## } ## ] ## ] If you turn the type argument to &quot;graph&quot;, you’ll get a graph result: &#39;MATCH p=()-[r:WAS_RECORDED]-&gt;() RETURN p LIMIT 5&#39; %&gt;% call_neo4j(con, type = &quot;graph&quot;) ## $nodes ## # A tibble: 6 x 3 ## id label properties ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; ## 1 13608 &lt;chr [1]&gt; &lt;list [2]&gt; ## 2 12591 &lt;chr [1]&gt; &lt;list [2]&gt; ## 3 13613 &lt;chr [1]&gt; &lt;list [2]&gt; ## 4 13594 &lt;chr [1]&gt; &lt;list [2]&gt; ## 5 13606 &lt;chr [1]&gt; &lt;list [2]&gt; ## 6 13600 &lt;chr [1]&gt; &lt;list [2]&gt; ## ## $relationships ## # A tibble: 5 x 5 ## id type startNode endNode properties ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;list&gt; ## 1 21824 WAS_RECORDED 13608 12591 &lt;list [0]&gt; ## 2 21825 WAS_RECORDED 13613 12591 &lt;list [0]&gt; ## 3 21819 WAS_RECORDED 13594 12591 &lt;list [0]&gt; ## 4 21823 WAS_RECORDED 13606 12591 &lt;list [0]&gt; ## 5 21822 WAS_RECORDED 13600 12591 &lt;list [0]&gt; ## ## attr(,&quot;class&quot;) ## [1] &quot;neo&quot; &quot;list&quot; The result is returned as one node or relationship by row. Due to the specific data format of Neo4J, there can be more than one label and property by node and relationship. That’s why the results are returned, by design, as a list-dataframe. 4.2 Parsing results We have designed several functions to unnest the output : unnest_nodes(), that can unnest a node dataframe : res &lt;- &#39;MATCH p=()-[r:WAS_RECORDED]-&gt;() RETURN p LIMIT 5;&#39; %&gt;% call_neo4j(con, type = &quot;graph&quot;) unnest_nodes(res$nodes) ## # A tibble: 6 x 5 ## id label release name formed ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 13608 record 1992 Hvis lyset tar oss NA ## 2 12591 Band NA Burzum 1991 ## 3 13613 record 1993 Filosofem NA ## 4 13594 record 1991 Demo I NA ## 5 13606 record 1992 Aske NA ## 6 13600 record 1992 Det som engang var NA Note that this function will return NA for the properties that aren’t in a node. For example here, we have no ‘formed’ information for the record nodes . On the long run, and this is not {neo4r} specific but Neo4J related, a good practice is to have a “name” propertie on each node, so this column will be full here. Also, it is possible to unnest either the properties or the labels : res$nodes %&gt;% unnest_nodes(what = &quot;properties&quot;) ## # A tibble: 6 x 5 ## id label release name formed ## &lt;chr&gt; &lt;list&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 13608 &lt;chr [1]&gt; 1992 Hvis lyset tar oss NA ## 2 12591 &lt;chr [1]&gt; NA Burzum 1991 ## 3 13613 &lt;chr [1]&gt; 1993 Filosofem NA ## 4 13594 &lt;chr [1]&gt; 1991 Demo I NA ## 5 13606 &lt;chr [1]&gt; 1992 Aske NA ## 6 13600 &lt;chr [1]&gt; 1992 Det som engang var NA res$nodes %&gt;% unnest_nodes(what = &quot;label&quot;) ## # A tibble: 6 x 3 ## id properties label ## &lt;chr&gt; &lt;list&gt; &lt;chr&gt; ## 1 13608 &lt;list [2]&gt; record ## 2 12591 &lt;list [2]&gt; Band ## 3 13613 &lt;list [2]&gt; record ## 4 13594 &lt;list [2]&gt; record ## 5 13606 &lt;list [2]&gt; record ## 6 13600 &lt;list [2]&gt; record unnest_relationships() There is only one nested column in the relationship table, thus the function is quite straightforward : unnest_relationships(res$relationships) ## # A tibble: 5 x 5 ## id type startNode endNode properties ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 21824 WAS_RECORDED 13608 12591 &lt;NA&gt; ## 2 21825 WAS_RECORDED 13613 12591 &lt;NA&gt; ## 3 21819 WAS_RECORDED 13594 12591 &lt;NA&gt; ## 4 21823 WAS_RECORDED 13606 12591 &lt;NA&gt; ## 5 21822 WAS_RECORDED 13600 12591 &lt;NA&gt; unnest_graph() This function takes a graph results, and does unnest_nodes and unnest_relationships. unnest_graph(res) ## $nodes ## # A tibble: 6 x 5 ## id label release name formed ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;int&gt; ## 1 13608 record 1992 Hvis lyset tar oss NA ## 2 12591 Band NA Burzum 1991 ## 3 13613 record 1993 Filosofem NA ## 4 13594 record 1991 Demo I NA ## 5 13606 record 1992 Aske NA ## 6 13600 record 1992 Det som engang var NA ## ## $relationships ## # A tibble: 5 x 5 ## id type startNode endNode properties ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 21824 WAS_RECORDED 13608 12591 &lt;NA&gt; ## 2 21825 WAS_RECORDED 13613 12591 &lt;NA&gt; ## 3 21819 WAS_RECORDED 13594 12591 &lt;NA&gt; ## 4 21823 WAS_RECORDED 13606 12591 &lt;NA&gt; ## 5 21822 WAS_RECORDED 13600 12591 &lt;NA&gt; ## ## attr(,&quot;class&quot;) ## [1] &quot;neo&quot; &quot;list&quot; 4.2.1 Extraction There are two convenient functions to extract nodes and relationships: &#39;MATCH p=()-[r:WAS_RECORDED]-&gt;() RETURN p LIMIT 5;&#39; %&gt;% call_neo4j(con, type = &quot;graph&quot;) %&gt;% extract_nodes() ## # A tibble: 6 x 3 ## id label properties ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; ## 1 13608 &lt;chr [1]&gt; &lt;list [2]&gt; ## 2 12591 &lt;chr [1]&gt; &lt;list [2]&gt; ## 3 13613 &lt;chr [1]&gt; &lt;list [2]&gt; ## 4 13594 &lt;chr [1]&gt; &lt;list [2]&gt; ## 5 13606 &lt;chr [1]&gt; &lt;list [2]&gt; ## 6 13600 &lt;chr [1]&gt; &lt;list [2]&gt; "],
["send.html", "Chapter 5 Sending data to the API", " Chapter 5 Sending data to the API 5.0.1 Reading and sending a cypher file : read_cypher reads a cypher file and returns a tibble of all the calls read_cypher(&quot;data-raw/create.cypher&quot;) ## # A tibble: 4 x 1 ## cypher ## &lt;chr&gt; ## 1 CREATE CONSTRAINT ON (b:Band) ASSERT b.name IS UNIQUE; ## 2 CREATE CONSTRAINT ON (c:City) ASSERT c.name IS UNIQUE; ## 3 CREATE CONSTRAINT ON (r:record) ASSERT r.name IS UNIQUE; ## 4 CREATE (ancient:Band {name: &#39;Ancient&#39;, formed: 1992}), (acturus:Band {na… send_cypher reads a cypher file, and send it the the API. By default, the stats are returned. send_cypher(&quot;data-raw/constraints.cypher&quot;, con) 5.0.2 Sending csv to Neo4J The load_csv sends an csv from an url to the Neo4J browser. The args are : on_load : the code to execute on load con : the connexion object url : the url of the csv to send header : wether or not the csv has a header periodic_commit : the volume for PERIODIC COMMIT as : the AS argument for LOAD CSV format : the format of the result include_stats : whether or not to include the stats meta : whether or not to return the meta information # Create the constraints call_neo4j(&quot;CREATE CONSTRAINT ON (a:artist) ASSERT a.name IS UNIQUE;&quot;, con) call_neo4j(&quot;CREATE CONSTRAINT ON (al:album) ASSERT al.name IS UNIQUE;&quot;, con) # List constaints (if any) con$get_constraints() ## label type property_keys ## 1: artist UNIQUENESS name ## 2: Maintainer UNIQUENESS name ## 3: Band UNIQUENESS name ## 4: City UNIQUENESS name ## 5: record UNIQUENESS name ## 6: Package UNIQUENESS name ## 7: Author UNIQUENESS name # Create the query that will create the nodes and relationships on_load_query &lt;- &#39;MERGE (a:artist { name: csvLine.artist}) MERGE (al:album {name: csvLine.album_name}) MERGE (a) -[:has_recorded] -&gt; (al) RETURN a AS artists, al AS albums;&#39; # Send the csv load_csv(url = &quot;https://raw.githubusercontent.com/ThinkR-open/datasets/master/tracks.csv&quot;, con = con, header = TRUE, periodic_commit = 50, as = &quot;csvLine&quot;, on_load = on_load_query) ## $artists ## # A tibble: 1 x 1 ## name ## &lt;chr&gt; ## 1 Municipal Waste ## ## $albums ## # A tibble: 1 x 1 ## name ## &lt;chr&gt; ## 1 Hazardous Mutation ## ## $stats ## # A tibble: 12 x 2 ## type value ## &lt;chr&gt; &lt;dbl&gt; ## 1 contains_updates 1 ## 2 nodes_created 1975 ## 3 nodes_deleted 0 ## 4 properties_set 1975 ## 5 relationships_created 1183 ## 6 relationship_deleted 0 ## 7 labels_added 1975 ## 8 labels_removed 0 ## 9 indexes_added 0 ## 10 indexes_removed 0 ## 11 constraints_added 0 ## 12 constraints_removed 0 ## ## attr(,&quot;class&quot;) ## [1] &quot;neo&quot; &quot;list&quot; 5.0.3 Transform elements to cypher queries vec_to_cypher() creates a list : vec_to_cypher(iris[1, 1:3], &quot;Species&quot;) ## [1] &quot;(:`Species` {`Sepal.Length`: &#39;5.1&#39;, `Sepal.Width`: &#39;3.5&#39;, `Petal.Length`: &#39;1.4&#39;})&quot; and vec_to_cypher_with_var() creates a cypher call starting with a variable : vec_to_cypher_with_var(iris[1, 1:3], &quot;Species&quot;, a) ## [1] &quot;(a:`Species` {`Sepal.Length`: &#39;5.1&#39;, `Sepal.Width`: &#39;3.5&#39;, `Petal.Length`: &#39;1.4&#39;})&quot; This can be combined inside a cypher call: paste(&quot;MERGE&quot;, vec_to_cypher(iris[1, 1:3], &quot;Species&quot;)) ## [1] &quot;MERGE (:`Species` {`Sepal.Length`: &#39;5.1&#39;, `Sepal.Width`: &#39;3.5&#39;, `Petal.Length`: &#39;1.4&#39;})&quot; "],
["convert.html", "Chapter 6 Convert output", " Chapter 6 Convert output 6.0.1 {igraph} In order to be converted into a graph object: nodes need an id, and a name. By default, node name is assumed to be found in the “name” property returned by the graph, specifying any other column is allowed. The “label” column from Neo4J is renamed “group”. relationships need a start and an end, i.e. startNode and endNode in the Neo4J results. &#39;MATCH p=()-[r:WAS_RECORDED]-&gt;() RETURN p LIMIT 5;&#39; %&gt;% call_neo4j(con, type = &quot;graph&quot;) %&gt;% convert_to(&quot;igraph&quot;) ## IGRAPH c9d6247 DN-- 6 5 -- ## + attr: name (v/c), label (v/c), release (v/n), formed (v/n), type ## | (e/c), id (e/c), properties (e/x) ## + edges from c9d6247 (vertex names): ## [1] Hvis lyset tar oss-&gt;Burzum Filosofem -&gt;Burzum ## [3] Demo I -&gt;Burzum Aske -&gt;Burzum ## [5] Det som engang var-&gt;Burzum Which means that you can : &#39;MATCH p=()-[r:WAS_RECORDED]-&gt;() RETURN p LIMIT 5;&#39; %&gt;% call_neo4j(con, type = &quot;graph&quot;) %&gt;% convert_to(&quot;igraph&quot;) %&gt;% plot() "],
["visualise.html", "Chapter 7 Visualise data 7.1 With {ggraph} :", " Chapter 7 Visualise data 7.1 With {ggraph} : library(ggraph) &#39;MATCH p=()-[r:WAS_RECORDED]-&gt;() RETURN p LIMIT 20;&#39; %&gt;% call_neo4j(con, type = &quot;graph&quot;) %&gt;% convert_to(&quot;igraph&quot;) %&gt;% ggraph() + geom_node_label(aes(label = name)) + geom_edge_link() + theme_graph() ## Using `nicely` as default layout 7.1.1 With {visNetwork} network &lt;- &#39;MATCH p=()-[r:WAS_RECORDED]-&gt;() RETURN p LIMIT 20;&#39; %&gt;% call_neo4j(con, type = &quot;graph&quot;) %&gt;% convert_to(&quot;visNetwork&quot;) visNetwork::visNetwork(network$nodes, network$relationships) "],
["appendixa.html", "Chapter 8 Appendix A 8.1 Install a Neo4J server", " Chapter 8 Appendix A 8.1 Install a Neo4J server 8.1.1 On a Linux Machine 8.1.2 On a Mac Machine "]
]
